
수업기간: 2025-07-1 ~ 2025-07-25
수업시간: 아침 10 ~ 오후 2시 (하루 4시간)
수업진행: 50분수업(실습및 설명),  10분휴식
진행강사: 김영임

https://github.com/posasi2000/baewha.git
https://www.dataq.or.kr


7월17일 목요일 수업내용
 ㄴ1교시  모델링이론개념및 키값요약 
 ㄴ2교시  제약조건 constraint   fk
 ㄴ3교시  제약조건 constraint  check
 ㄴ4교시 TCL - commit,rollback,savepoint 

★ 1교시 
★ --------------------------------------------------------------------------------------
윈도우시작아이콘 클릭후  cmd
윈도우시작아이콘 + R(run) 

C:\Users\여러분컴퓨터이름>  sqlplus system/1234
SQL> show user ;
     USER is "SYSTEM"

★ 객체대상 참고
SQL> select  username from  dba_users ;
SQL> select  username from  all_users ;
SQL> select  tname from  tab ;
SQL> select  table_name     from user_tables ;
SQL> select  sequence_name  from user_sequences; 
SQL> select constraint_name from user_constraints ;

★ baewha유저에서 제약조건 연습합니다 
SQL> create user baewha
     identified by 1234
     default tablespace users
     temporary tablespace temp ;
SQL> grant  resource, connect  to   baewha ;   -- 권한 부여 이렇게 기술가능
SQL> revoke resource, connect  from baewha ;   -- 권한 회수 이렇게 기술가능

★ DDL alter실습 참고
실습1]  hit숫자컬럼 추가 기본값은 0
  alter table sosi add(hit  int default 0) ;

실습2] wdate날짜컬럼 추가  기본값 default sysdate
    alter table sosi add(wdate date default sysdate) ;

실습3] title컬럼 varchar2(10) 크기변경 modify
  alter table sosi modify( title varchar2(10)) ;

실습4] salary컬럼  pay필드변경
  alter table sosi rename column salary  to   pay ;

실습5] birth 필드 삭제 
  alter table sosi drop column birth ;

실습6] grade 필드 추가
  alter table sosi add(grade char(1) default 'F' ) ;

col  grade for a10 ;  
실습7] 조건처리 case ~ end 성적처리 축합격및 재시험을 아래 student에서 응용
 select code, grade ,
     case 
        when grade = 'A'   then  '합격'
        when grade = 'B'   then  '합격'
        when grade = 'C'   then  '보통'
        when grade = 'D'   then  '노력'
        else   '재수강'
      end   "결과"
   from sosi;



실습]8 조건처리 decode () 
   select code, grade,
   decode( grade , 'A', '10', 'B', '10', 'C', '5', 'D', '3', '1') as "결과" 
   from sosi ;


★ group by ~ 조건절 having
SQL> select * from sosi ;
SQL> select count(code)  "갯수"  from sosi ;
SQL> select sum(pay)  "합계"  from sosi ;
SQL> select grade, sum(pay)  "합계"  from sosi  group by grade ;
SQL> select grade, sum(pay)  "합계"  from sosi  group by grade  having sum(pay) > 90  order by grade ;
SQL> select grade , to_char(sum(pay), 'L99,999')  "합계"  from sosi group by grade having sum(pay)> 90 order by grade ;

 -- to_char(round(avg(),2), '99,999.99') 직접 기술하세요
 select grade, to_char(round(avg(pay),2) , '99,999.99')  "평균"  from sosi group by grade order by grade;
 select grade, to_char(round(avg(pay),2) , '99,999.99')  "평균"  from sosi group by grade having avg(pay) < 80  order by grade ;


★ sequence 일련번호 발생
SQL> create sequence  board_seq ;  -- 시작1숫자부터 1씩증가
SQL> drop sequence  test_seq ;  
SQL> create sequence  test_seq  increment by 1 start with 1 nocycle nocache noorder; -- 시퀀스는 자동번호 1부터시작 1씩증가 
SQL> select sequence_name  from user_sequences; 

INCREMENT BY : 시퀀스 실행 시 증가시킬 값
START WITH : 시퀀스의 시작값이다. (MINVALUE과 같거나 커야 한다)  with전치사
MINVALUE : 시퀀스가 시작되는 최소값이다.
MAXVALUE : 시퀀스가 끝나는 최대값이다. 
NOCYCLE | CYCLE : NOCYCLE (반복안함), CYCLE(시퀀스의 최대값에 도달 시 최소값 1부터 다시시작)
NOCACHE | CACHE : NOCACHE(사용안함), CACHE(캐시를 사용하여 미리 값을 할당해 놓아서 속도가 빠르며, 동시 사용자가 많을 경우 유리)
NOORDER | ORDER : NOORDER(사용안함), ORDER(요청 순서로 값을 생성하여 발생 순서를 보장하지만 조금의 시스템 부하가 있음)


★  student테이블 실습 
SQL> select idx, name, kor, eng, mat , 
     to_char((kor+eng+mat),'99,999') total  , to_char( round((kor+eng+mat)/3,2), '999.99') avg from  student  order by 7 desc;

SQL> select idx , name , kor , eng , mat, (kor+eng+mat) as "total",  rank()  over(order by (kor+eng+mat) desc )  "순위"  from student ;
SQL> select idx , name , kor , eng , mat, sum(kor+eng+mat)   over(order by (kor+eng+mat) desc )  "누적"  from student ;

SQL> select  rank()  over(order by (kor+eng+mat) desc )  "순위" ,
     name , kor , eng , mat ,
     (kor+eng+mat) total, floor((kor+eng+mat)/3) as avg,
       case
            when floor((kor+eng+mat)/3) >= 70 then '축합격'
            else  '재시험'
       end  "결과" 
   from  student  order by  avg desc;

      순위 NAME         KOR ENG MAT      TOTAL        AVG 결과
---------- ------------ --- --- --- ---------- ---------- ------------------
         1 고길동       100  95  90        285         95 축합격
         2 둘리짱        80  80  95        255         85 축합격
         3 희동이        80  78  90        248         82 축합격
         4 또치군        75  90  65        230         76 축합격
         4 도우넛        75  80  75        230         76 축합격
         6 마이콜        60  60  60        180         60 재시험


혹시라도 baewha유저가 없으면 기술하세요
SQL> create user baewha
     identified by 1234
     default tablespace users
     temporary tablespace temp ;

//user유저확인 명령어
SQL> select  username from  dba_users ;
SQL> select  username from  all_users ;

//baewha유저 접속및 자원 권한부여
SQL> grant  connect  to baewha ;
SQL> grant  resource to  baewha ;
SQL> grant  dba  to  baewha ;

이미기술함 SQL> grant  resource, connect  to   baewha ;   -- 권한 부여
기술금지권한횟수 SQL> revoke resource, connect  from baewha ;   -- 권한 회수
 

★ 2교시  constraint제약은 연습은 우리가 만든 baewha/1234 실습하면 훨씬 더 좋습니다
★ --------------------------------------------------------------------------------------
제약에는 5가지종류가 있습니다
1) Not null :  컬럼에 null값 허용하지 않음
2) unique : 컬럼값이 유일해야 함 
3) primary key : 컬럼값이 유일하고  null허용하지 않음 primary key = not null + unique
4) Foreign key : 다른테이블의 컬럼을 참조하는 키(FK)       
5) check : 컬럼조건에 참인값만 허용함 


테이터 조작으로부터 테이터를 보호하기 위한 여러가지 방법들 중 가장 대표적인 방법이 제약조건입니다
테이터무결성(integrity)을 유지하기 위해 제약은 아래의 3가지 특징이 있습니다 
1) 개체무결성(Entity Integrity) : 테이블의 행은 유일
2) 도메인 무결성(Domain Integrity) : 컬럼에는 허용되는 값들 만이 저장
3) 참조무결성(Reference Integrity) : 참조하는 컬럼에는 참조되는 컬럼에있는 값들만이 저장
   가장대표적인경우가 PK - FK관계입니다 즉 PK와 FK제약을 설정하는이유는 테이타무결성때문입니다.


SQL> connect baewha/1234 ;
   Connected.

SQL> show user ;
   USER is "BAEWHA"


-- guest테이블 작성
delete from guestreply ;  -- 처음실행하면 guestreply테이블이 없어서 에러발생
delete from guest ;    -- 처음실행하면 guest테이블이 없어서 에러발생

drop  table guest  ;
create  table  guest (   
   code   number(4)  primary key ,
   name    varchar2(10) not null  ,
   title   varchar2(16) not null , 
   wdate   date  not null ,
   hit    number(3) 
 ); 


 insert into guest values(5500, 'aa', 'note', sysdate,  0 ) ;
 insert into guest values(7700, 'bb', 'blue', sysdate,  0 ) ;
 insert into guest values(9900, 'cc', 'cake', sysdate,  0 ) ;
 select * from guest ;
 commit ;

col title for a10
col name for a12
set linesize 2000
set pagesize 2000
select * from guest ;
commit ;


-- guestreply테이블및 시퀀스 작성
 drop sequence  guestreply_seq ;  
 create sequence guestreply_seq ;
 commit ; 

drop table guestreply;  
create table  guestreply (    
  num number(4)  primary key ,   
  writer varchar2(10) not null ,
  content varchar2(20) not null ,  
  code number(4) not null     
);
commit ; 


 select sequence_name    from  user_sequences ;
 select constraint_name  from user_constraints  ; 
 select constraint_name, table_name   from  user_constraints  ; 
 

 참고1]  hit숫자컬럼 추가 기본값은 0
  alter table sosi add(hit  int default 0) ;

 참고2] wdate날짜컬럼 추가  기본값 default sysdate
    alter table sosi add(wdate date default sysdate) ;

 참고3] birth 필드 삭제 
   alter table sosi drop column  birth ;


 alter table guestreply drop constraint guest_code_fk;  -- 제약이름삭제 처음에는 에러발생


 alter table guestreply add  constraint guest_code_fk
    foreign key(code)  references guest(code) on delete cascade ;

 select constraint_name, table_name   from  user_constraints  ;
 commit ;

  board게시판   boardreply게시판댓글  -> 전체출력 게시판 제목클릭하면 상세문서에서 댓글, 주문
   guest방명록   guestreply방명록댓글  -> 전체출력 방명록 제목클릭하면 상세문서에서 댓글, 주문
 

insert into guestreply values(guestreply_seq.nextval, 'rain','rain', 7700 );
insert into guestreply values(guestreply_seq.nextval, 'lee','lee', 5500 );    
insert into guestreply values(guestreply_seq.nextval, 'snow','snow', 7700);
insert into guestreply values(guestreply_seq.nextval, 'last','last', 7700 );
insert into guestreply values(guestreply_seq.nextval, 'kim','kim', 7700 );  
insert into guestreply values(guestreply_seq.nextval, 'two','two', 5500 ); 


col content for a12
col writer for a12
select * from  guestreply order by code;
commit ;

insert into guestreply values(guestreply_seq.nextval, 'star','coffee', 2200 ); 
  -- 에러발생 ORA-02291: integrity constraint (BAEWHA.GUEST_CODE_FK) violated - parent key not found
  -- 2200코드데이터가 등록이 안되어서 FK위배

 insert into guest values(3311, 'LG', 'gram', sysdate,  0  ) ;
 insert into guest values(3322, 'KT', 'snow', sysdate,  0  ) ;
 select * from guest ;
 commit ; 

 select * from guestreply ;
 delete from guest where code = 7700;   -- 7700참조한 댓글테이블에서 자동삭제 delete cascade;
 select * from  guestreply order by code;
 select * from guest ;
 commit ; 

 delete from guest where code = 5500;   -- 5500참조한 댓글테이블에서 자동삭제 delete cascade;
 select * from  guestreply order by code;
 select * from guest ;
 commit ; 



-- 아래처럼 제약조건을 테이블에서 직접 기술  fk_guestreply_guest
create table guestreply (
  num number(4) not null primary key ,   
  writer varchar2(10) not null ,
  content varchar2(20)not null ,
  code number(4) not null ,
  constraint fk_guestreply_guest  foreign key(code) references guest(code) on delete cascade
);

추천참고 alter table guestreply add  constraint guest_code_fk foreign key(code) references guest(code) on delete cascade ;


제약에는 5가지종류가 있습니다
1) Not null :  컬럼에 null값 허용하지 않음
2) unique : 컬럼값이 유일해야 함 
3) primary key : 컬럼값이 유일하고  null허용하지 않음 primary key = not null + unique
4) Foreign key : 다른테이블의 컬럼을 참조하는 키(FK)       
5) check : 컬럼조건에 참인값만 허용함 

★ 제약조건  check 실습
 drop  table temp ;
 create table  temp(
    empid  number(4) primary key,
    empname  varchar2(10) ,
    sal  number(7,2) ,
    comm  number(5,2) ,
    constraint  temp_chk_sal  check(sal>comm)  
);   
commit ;

  insert into temp values( 2234, 'aaa', 4500, 91) ;
  insert into temp values( 2237, 'bbb', 3100, 71) ;
  insert into temp values( 3345, 'ddd', 4500, 91) ;
  select  * from temp ;
  commit ;

  insert into temp values( 7700, 'ccc', 780, 9800) ;   -- check제약조건에러
     -- ORA-01438: value larger than specified precision allowed for this column
  insert into temp values( 8800, 'ddd', 3400, 7600) ;  -- check제약조건에러
   -- ORA-01438: value larger than specified precision allowed for this column



★ 3교시/4교시 TCL - commit,rollback,savepoint 
★ --------------------------------------------------------------------------------------
★ 객체대상 참고
참고 select  sequence_name  from user_sequences; 
참고 select  table_name     from user_tables; 


SQL> drop sequence  bbs_seq ;
SQL> create sequence  bbs_seq ; --1부터시작 1씩증가 

SQL> drop table bbs ;
SQL> create table   bbs  (
          key number  primary key ,
          name varchar2(10) not null  ,
          pay number(3)  
       )  ;

 delete from bbs ; -- 조건없이 모든데이터 삭제
 insert into  bbs values(bbs_seq.nextval, 'abc', 23) ;
 insert into  bbs values(bbs_seq.nextval, 'xyz', 34) ;
 insert into  bbs values(bbs_seq.nextval, 'blue',97) ;
 insert into  bbs values(bbs_seq.nextval, 'red',15) ;
 insert into  bbs values(bbs_seq.nextval, 'orange',56) ;

 select * from  bbs order by pay desc ;
 commit ;


SQL> delete from  bbs  where pay > 30 ;
SQL> select * from  bbs ;
SQL> rollback ;

SQL> insert  into   bbs  values( bbs_seq.nextval, 'oreo', 40) ;
SQL> select * from  bbs  ;
SQL> rollback ;   
SQL> select * from  bbs  order by pay desc ;
SQL> commit ;

SQL> update bbs set name = 'kakao' where pay > 30 ;
SQL> select * from  bbs ;
SQL> rollback ;   
SQL> select * from  bbs  order by  pay  desc ;


SQL> set linesize 3000
SQL> set pagesize 3000
SQL> col job for a10
SQL> col ename for a10

SQL> clear screen ;
SQL> select * from emp ;


SQL> create table t_emp(empno, ename, mgr, sal, deptno)
     as
     select  empno, ename, mgr, sal, deptno   from emp 
     where deptno in( 10, 30) ;

 select * from t_emp order by deptno ;
 commit ; 

SQL>  savepoint  del_mydeptno10 ;
SQL>  delete from t_emp  where  deptno = 10 ;
SQL>  select * from t_emp order by deptno ;

SQL>  savepoint  update_deptno30 ;
SQL>  update t_emp  set  sal=sal-1500  where deptno = 30 ;  
SQL>  select * from t_emp order by deptno ;

SQL>  rollback  to   del_mydeptno10 ;  -- 롤백되면서  update문장처리도 취소   
SQL>  select * from t_emp order by deptno ;
SQL> 
SQL>  rollback to  update_deptno30 ;  
      -- 에러 ORA-01086: savepoint 'UPDATE_DEPTNO30' never established in this session or is invalid
SQL>  select * from t_emp order by deptno ;
SQL>  commit;



 drop table  t_emp;
 create table  t_emp(empno, ename, mgr, sal, deptno)
     as
    select  empno, ename, mgr, sal, deptno   from emp 
    where deptno in( 10, 30) ;

 select * from t_emp order by deptno ;
 commit ; 
 clear screen ;
 select * from t_emp order by deptno ;


SQL>  savepoint  test_update_sal ;
SQL>  update t_emp  set  sal=sal-2000  where deptno = 30 ;  
SQL>  select * from t_emp order by deptno ;

SQL>  savepoint  test_insert ;
SQL>  insert into t_emp values( 9900, 'lee', 7499, 340, 20) ; 
SQL>  select * from t_emp order by deptno ;

SQL>  rollback to  test_update_sal ;   -- 신규처리 자동취소됨
SQL>  select * from t_emp order by deptno ;


★ 4교시 보충 emp테이블 null값 조회, nvl()=null value
★ --------------------------------------------------------------------------------------
SQL> select * from emp where comm is null ;
SQL> select * from emp where comm is not null ;
SQL> select ename, sal, sal+300  "bonus" from emp ;
SQL> select empno, ename, job, sal , comm , sal+comm  "total" from  emp ;
     -- sal급여 + comm보너스 연산할때 숫자값이 null있으면 연산결과 null 

SQL> select empno, ename, job, sal , comm  from  emp ;
SQL> select empno, ename, job, sal , nvl(comm,0)  "comm"  from  emp ;
SQL> select empno, ename, job, sal , comm , sal+nvl(comm,0)  "total" from  emp ;


NVL(컬럼명,값) : 컬럼이 널일 때 변환해줄 값을 지정
NVL2(컬럼, 값1, 값2): 컬럼이 널이 아닐 경우는 값1을 반환, 널일 경우는 값2를 반환하는 함수
SQL> select ename, job, mgr, nvl2(mgr,0,1) "상사" from emp ;
SQL> select ename || ' ' || 'is a ' || job  as  " emp info " from emp ;
SQL> clear screen

★ 보충 emp테이블 distinct
★ --------------------------------------------------------------------------------------
문제] distinct : 중복행의 제거
     distinct 뒤에 오는 컬럼이 여러개 기술되면 컬럼들의 조합이 중복되지 않게 나타난다.
SQL> clear screen
SQL> select * from emp ;
SQL> select distinct job from emp ;
SQL> select distinct deptno from emp ;

SQL> select distinct deptno, job from emp ;
SQL> select distinct deptno, job from emp order by deptno  ;

문제1] emp테이블에서 1982년 1월1일 이후 입사한 사원의 사번,이름, 업무,입사일자(hiredate)를 소트출력하세요
SQL> select * from emp ;
SQL> select empno, ename, job, hiredate from emp 
     where hiredate > '82/01/01'  order by hiredate;

문제2] emp테이블에서 급여가 1500 ~ 300사이에 있는 사원의 이름,업무,급여를 출력하세요
SQL> select * from emp ;
SQL> select ename, job, sal from emp where sal >=1500 and sal <=3000;
SQL> select ename, job, sal from emp where sal between 1500 and 3000;


문제3] emp테이블에서 입사날짜 '81/04/02' ~ '82/10/09' 출력하세요
SQL>  select * from emp  where hiredate between '81/04/02' and  '82/10/09' ;


실습]
SQL> select ename, sal, sum(sal) over(order by sal asc) "누적"  from emp;
SQL> select ename, sal, rank()  over(order by sal )  "순위"  from  emp ;
SQL> select  empno, ename,  deptno ,
       case 
           when deptno=10 then 'Accounting'
           when deptno=20 then  'Reseach'
           when deptno=30 then   'sales'
           when deptno=40 then   'Operations'
           else  '보류'
         end "부서명"
     from  emp ;

SQL>  select to_char(sysdate, 'day') "결과"  from dual;
	결과
	------------------------
	목요일

SQL>  select to_char(sysdate, 'dy')  "결과" from dual;
	결과
	--------
	목

 SQL> select to_char(sysdate, 'd')  "결과"  from dual;
	--결과 : 숫자  1일  2월  3화  4수  5목  6금  7토


SQL> select empno, ename, hiredate, to_char(hiredate, 'd' ) from emp ;
  Oracle에서 TO_CHAR(날짜, 'd')는 그 날짜의 요일을 1~7 범위 숫자로 반환합니다.
   일요일=1, 월요일=2, 화요일=3, 수요일=4, 목요일=5, 금요일=6, 토요일=7

SQL> select empno, ename, hiredate, to_char(hiredate, 'yyyy-mm-dd day' ) "날짜"  from emp ;
     EMPNO ENAME      HIREDATE 		날짜
---------- ---------- -------- ----------------------------------------------
      7369 SMITH      80/12/17 1980-12-17 수요일
      7499 ALLEN      81/02/20 1981-02-20 금요일
      7521 WARD       81/02/22 1981-02-22 일요일
      7566 JONES      81/04/02 1981-04-02 목요일
      7654 MARTIN     81/09/28 1981-09-28 월요일
      7698 BLAKE      81/04/01 1981-04-01 수요일
      7782 CLARK      81/06/01 1981-06-01 월요일
      7788 SCOTT      82/10/09 1982-10-09 토요일
      7839 KING       81/11/17 1981-11-17 화요일
      7844 TURNER     81/09/08 1981-09-08 화요일
      7876 ADAMS      83/01/12 1983-01-12 수요일
      7900 JAMES      81/10/03 1981-10-03 토요일
      7902 FORD       84/11/05 1984-11-05 월요일
      7934 MILLER     82/01/23 1982-01-23 토요일
14 rows selected.

SQL> select ename,to_char(hiredate,'YYYY"년"fmmm"월"DD"일"')" 입사일" ,
       case to_char(hiredate,'d')
            when '1' then 'sunday'
            when '2' then 'monday'
            when '3' then 'tuesday'
            when '4' then 'wednesday'
            when '5' then 'thursday'
            when '6' then 'friday'
            else 'saturday'
       end "입사요일"
from emp 
order by to_char(hiredate-1,'d') asc;	

ENAME       입사일                            입사요일
---------- ---------------------------------- ------------------
CLARK      1981년6월1일                       monday
FORD       1984년11월5일                      monday
MARTIN     1981년9월28일                      monday
KING       1981년11월17일                     tuesday
TURNER     1981년9월8일                       tuesday
BLAKE      1981년4월1일                       wednesday
ADAMS      1983년1월12일                      wednesday
SMITH      1980년12월17일                     wednesday
JONES      1981년4월2일                       thursday
ALLEN      1981년2월20일                      friday
MILLER     1982년1월23일                      saturday
JAMES      1981년10월3일                      saturday
SCOTT      1982년10월9일                      saturday
WARD       1981년2월22일                      sunday
14 rows selected.


★ 수학함수 시험에 자주 등장
★ --------------------------------------------------------------------------------------
SQL>  select  floor(677.368659, 2) from dual ;  -- 에러 floor함수는 매개인자 2개 못가짐

SQL> select  ceil(677.368659) from dual ;    --  ceil함수는 무조건 올림 정산을받을때 적용좋아요
	CEIL(677.368659)
	-----------------
              678

SQL> select  ceil(677.5368659) from dual ;
	CEIL(677.5368659)
	---------------
            678 


★ trunc 양수,음수는 무조건 소숫점 버리기
 select  trunc(7.4) from dual  ;     -- 정답 7 무조건버리기
 select  trunc(7.6) from dual  ;     -- 정답 7 무조건버리기
 select  trunc(-7.4) from dual ;     -- 정답 -7 무조건버리기
 select  trunc(-7.6) from dual ;     -- 정답 -7 무조건버리기


★ floor차이점 양수일때 무조건버리기,  음수는  -1더하고 버리기
 select  floor(7.4) from dual ;      -- 정답 7 무조건버리기
 select  floor(7.6) from dual ;      -- 정답 7 무조건버리기
 select  floor(-7.4) from dual ;     -- 정답 -8 무조건버리기
 select  floor(-7.6) from dual ;     -- 정답 -8 무조건버리기

★ round함수 자동올림속성 적용 음수에도 적용됨
 select  round(7.4) from dual ;     -- 정답 7   소숫점 자릿수가 0~4일때 버리는 속성
 select  round(7.6) from dual ;     -- 정답 8   소숫점 자릿수가 5~9일때 올리는 속성
 select  round(-7.4) from dual ;    -- 정답 -7  소숫점 자릿수가 0~4일때 버리는 속성
 select  round(-7.6) from dual ;    -- 정답 -8  소숫점 자릿수가 5~9일때 올리는 속성

★ ceil함수 양수는 +1 , 음수는 음수값 그자체
 select  ceil(7.4) from dual ;      -- 정답 8  ceil함수는 양수일때 1을 더하는 느낌
 select  ceil(7.6) from dual ;      -- 정답 8  ceil함수는 양수일때 1을 더하는 느낌
 select  ceil(-7.4) from dual ;     -- 정답 7  ceil함수는 음수일때 음수값만 출력
 select  ceil(-7.6) from dual ;     -- 정답 7  ceil함수는 음수일때 음수값만 출력


★ DDL- alter명령어, drop table 제약조건까지 삭제 
★ --------------------------------------------------------------------------------------
1) 새로운컬럼 추가    alter   table  테이블명 add ( 필드명   타입) ;
2) 기존컬럼 타입변경  alter   table  테이블명  modify(필드  타입) ;
3) 기존컬럼필드 변경  alter   table  테이블명  rename  column  구필드명 to  신새로운필드명
4) 컬럼 삭제         alter   table  테이블명  drop column  필드이름;
5) 테이블 삭제       drop    table   테이블명;  
6) 테이블이름 변경   alter   table  bbs  rename to  new_bbs ;    --  테이블이름자체 변경 


SQL> show user ;
   USER is "BAEWHA"
SQL> select constraint_name from user_constraints;
SQL>  drop table guest cascade constraint ;  -- table삭제되면서 제약조건까지 삭제
SQL>  drop table guestreply cascade constraint ;  -- table삭제되면서 제약조건까지 삭제
SQL>  drop table temp cascade constraint ;  -- table삭제되면서 제약조건까지 삭제
SQL> select constraint_name from user_constraints;


★ emp테이블및 데이터모델링
★ --------------------------------------------------------------------------------------

  C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin\scott.sql
참고만SQL> @ C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin\scott.sql
참고만SQL> start C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin\scott.sql

참고만SQL> commit ;
참고만SQL> show user;
참고만SQL> alter user scott identified by tiger ;
참고만SQL> conn scott/tiger
참고만SQL> show user;


★ -- 여기서부터 아래문장까지 복사해서 붙여넣기
drop table emp ;
drop table dept ;
drop table salgrade ;
drop table bonus ;
commit ;
clear screen ;


drop table dept;
create table dept(
  deptno number(3) primary key ,
  dname varchar2(20)  not null ,
  loc varchar2(20) not null 
);
commit ;


drop table emp ;
create table emp(
   empno number(4) primary key ,
   ename varchar2(10) not null,
   job varchar2(20) not null,
   mgr number(4) ,
   hiredate date,
   sal number not null ,
   comm number(7,2) , 
   deptno number(3) not null 
);
commit ;


 INSERT INTO DEPT VALUES (10,'ACCOUNTING','NEW YORK');
 INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
 INSERT INTO DEPT VALUES (30,'SALES','CHICAGO');
 INSERT INTO DEPT VALUES (40,'OPERATIONS','BOSTON');
 select * from dept ;
 commit ;


 INSERT INTO EMP VALUES(7369,'SMITH','CLERK',7902, to_date('1980-12-17','yyyy-MM-dd') ,800,null,20);
 INSERT INTO EMP VALUES(7499,'ALLEN','SALESMAN',7698, to_date('1981-02-20','yyyy-MM-dd'),1600,300,30);
 INSERT INTO EMP VALUES(7521,'WARD','SALESMAN',7698, to_date('1981-02-22','yyyy-MM-dd'),1250,200,30);
 INSERT INTO EMP VALUES(7566,'JONES','MANAGER',7839, to_date('1981-04-02','yyyy-MM-dd'),2975,30,20);
 INSERT INTO EMP VALUES(7654,'MARTIN','SALESMAN',7698, to_date('1981-09-28','yyyy-MM-dd'),1250,300,30);

 INSERT INTO EMP VALUES(7698,'BLAKE','MANAGER',7839, to_date('1981-04-01','yyyy-MM-dd'),2850,null,30);
 INSERT INTO EMP VALUES(7782,'CLARK','MANAGER',7839, to_date('1981-06-01','yyyy-MM-dd'),2450,null,10);
 INSERT INTO EMP VALUES(7788,'SCOTT','ANALYST',7566, to_date('1982-10-09','yyyy-MM-dd'),3000,null,20);
 INSERT INTO EMP VALUES(7839,'KING','PRESIDENT',null, to_date('1981-11-17','yyyy-MM-dd'),5000,3500,10); 
 INSERT INTO EMP VALUES(7844,'TURNER','SALESMAN',7698, to_date('1981-09-08','yyyy-MM-dd'),1500,0,30);

 INSERT INTO EMP VALUES(7876,'ADAMS','CLERK',7788, to_date('1983-01-12','yyyy-MM-dd'),1100,null,20);
 INSERT INTO EMP VALUES(7900,'JAMES','CLERK',7698, to_date('1981-10-03','yyyy-MM-dd') ,950,null,30);
 INSERT INTO EMP VALUES(7902,'FORD','ANALYST',7566, to_date('1984-11-05','yyyy-MM-dd') ,3000,null,20);
 INSERT INTO EMP VALUES(7934,'MILLER','CLERK',7782, to_date('1982-01-23','yyyy-MM-dd'),1300,null,10);
 select * from emp ;
 commit ;
 select * from dept ;
 commit ;
 -- 여기까지 먼저 1차 복사붙여넣기 


create table salgrade (
    grade  number,
    losal  number,
    hisal  number
 );

 INSERT INTO SALGRADE VALUES (1,700,1200);
 INSERT INTO SALGRADE VALUES (2,1201,1400);
 INSERT INTO SALGRADE VALUES (3,1401,2000);
 INSERT INTO SALGRADE VALUES (4,2001,3000);
 INSERT INTO SALGRADE VALUES (5,3001,4000);
 
 col grade for 9999;
 select * from salgrade ;
 commit ;
 -- 여기까지 먼저 2차 복사붙여넣기 


create table bonus
  as 
  select ename, job, sal, comm  from emp  ;
  commit ;
  

 col ename for a10
 col job for  a12
 col sal for  9999
 col comm for  9999
 set linesize 2500
 set pagesize 2500
 clear screen

 select  empno, ename, mgr from  emp;
 select rownum,  e.* from  emp  e;
 commit ;
★ --------------------------------------------------------------------------------------


★ 참고 서비스 확인하면 좋습니다
윈도우10 제어판-> 관리도구->  서비스 
 ㄴOracleServiceXE 시작됨 자동(오라클DB설치하면 자동실행됨)
 ㄴOracleXETNSListener 시작됨 자동(오라클DB설치하면 자동실행됨)

윈도우11 작업관리자 -> 서비스 
 ㄴOracleServiceXE 실행중(오라클DB설치하면 자동실행됨)
 ㄴOracleXETNSListener 실행중(오라클DB설치하면 자동실행됨)

★ --------------------------------------------------------------------------------------
참고 웹프로그램 할때는 포트번호를 변경하면 좋아요
SQL> select dbms_xdb.gethttpport() from dual
SQL> exec dbms_xdb.sethttpport(8888)
SQL> select dbms_xdb.gethttpport() from dual


jdk먼저설치, sqldeveloper설치
//추천  SQL Developer 다운로드 
//크롬웹브라우저 Oracel SQL Developer 19.2.1(64-1)
https://www.filehorse.com/download-oracle-sql-developer-64/43305/download/


//비추천 SQL Developer 다운로드 24.3.1 최신버젼 버젼
//SQL Developer 24.3.1 
 https://www.oracle.com/tools/downloads/sqldev-downloads.html
 https://www.oracle.com/database/sqldeveloper/technologies/download/





